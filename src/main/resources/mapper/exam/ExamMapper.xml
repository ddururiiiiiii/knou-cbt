<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="knou.cbt.domain.exam.mapper.ExamMapper">

    <sql id="ExamFilter">
        <if test="useYn != null and useYn != ''">
            AND e.use_yn = #{useYn}
        </if>
        <if test="departmentId != null">
            AND d.id = #{departmentId}
        </if>
        <if test="subjectId != null">
            AND s.id = #{subjectId}
        </if>
        <if test="examType != null">
            AND e.exam_type = #{examType}
        </if>
        <if test="year != null">
            AND e.year = #{year}
        </if>
    </sql>

    <sql id="BaseSelectColumns">
        SELECT
            e.id,
            e.subject_id,
            s.subject_name,
            d.id AS department_id,
            d.department_name,
            e.exam_type,
            s.grade,
            e.year,
            e.use_yn,
            e.created_at,
            e.updated_at
        FROM exam e
                 JOIN subject s ON e.subject_id = s.id
                 JOIN department d ON s.department_id = d.id
    </sql>

    <resultMap id="ExamResultMap" type="knou.cbt.domain.exam.dto.ExamDto">
        <id property="id" column="id"/>
        <result property="subjectId" column="subject_id"/>
        <result property="subjectName" column="subject_name"/>
        <result property="departmentId" column="department_id"/>
        <result property="departmentName" column="department_name"/>
        <result property="examType" column="exam_type"/>
        <result property="grade" column="grade"/>
        <result property="year" column="year"/>
        <result property="useYn" column="use_yn"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <select id="findAllExamDetails" resultMap="ExamResultMap">
        <include refid="BaseSelectColumns"/>
        <where>
            <include refid="ExamFilter"/>
        </where>
        ORDER BY e.id
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countAll" resultType="int">
        SELECT COUNT(*)
        FROM exam e
        JOIN subject s ON e.subject_id = s.id
        JOIN department d ON s.department_id = d.id
        <where>
            <include refid="ExamFilter"/>
        </where>
    </select>

    <select id="findExamExtendedById" parameterType="long" resultMap="ExamResultMap">
        <include refid="BaseSelectColumns"/>
        <where>
            e.id = #{id}
        </where>
    </select>

    <select id="findDuplicate" resultMap="ExamResultMap">
        <include refid="BaseSelectColumns"/>
        <where>
            e.year = #{year}
            AND e.exam_type = #{examType}
            AND e.subject_id = #{subjectId}
        </where>
        LIMIT 1
    </select>

    <insert id="insert" parameterType="knou.cbt.domain.exam.model.Exam" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO exam (subject_id, exam_type, year, use_yn)
        VALUES (#{subjectId},
                #{examType},
                #{year},
                COALESCE(#{useYn}, 'Y')
               )
    </insert>

    <update id="update" parameterType="knou.cbt.domain.exam.model.Exam">
        UPDATE exam
        SET subject_id = #{subjectId},
            exam_type  = #{examType},
            year       = #{year}
        <if test="useYn != null">
            , use_yn = #{useYn}
        </if>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM exam WHERE id = #{id}
    </delete>

    <select id="existsBySubjectId" resultType="boolean" parameterType="long">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM exam
        <where>
            subject_id = #{subjectId}
        </where>
    </select>

</mapper>
